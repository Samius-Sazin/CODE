..........1 Math Part..........

~Area of trapezium = .5 * (a+b) * h

~Volume of Cylinder = pi * r * r * h
~Area of Cylinder = pi * r * r

~Volume of a Spherical(Golakar) shape Balloon = 4/3 * pi * r^3

~ /*
a, b, c are 3 sides of a Triangle

	Half perimeter of triangle s = (a+b+c)/2
	Area of Triangle A = root(s*(s-1)*(s-b)*(s-c))

	Inner Circle Radius r = (triangle area)/s

	Outer Circle Radius r = (a*b*c)/(4 * Triangle Area)

*/........


/* RIGHT ANGLE TRIANGLE

      --All forms Right Angle Triangle--
	3, 4, 5   --> *2 --> 6, 8, 25
	5, 12, 13 --> *2 --> 10, 24, 26
	7, 24, 25 --> *2 --> 14, 48, 50

	a, b are two sides, c is hypotonias, p perpendicular from c(p divide c by x, y)

	b^2 = c^2 + x^2
	a^2 = c^2 + y^2
	p^2 = x*y
	p = (a*b)/c
	1/p^2 = 1/a^2 + 1/b^2

	Inner Circle Radius = (a+b-c)/2
	Outer Circle Radius = c/2



*/........



~ /* RIGHT CIRCCULAR CONE...

h is the perpendicular hight, r is base radius, l is lateral hight

	Area of base = Pi*r^2
	Area of Lateral Surface = Pi*r*l
	Total Area / Surface Area = Pi*r^2 + Pi*r*l = Pi*r*(r+l)

	Volume = Pi*r^2*h/3

*/.......


~/*   Finite Series :

~ Arithmetic Series(Somantor dhara)
	n th term = a+(n-1)d
 sum of n terms = n(2a+(n-1)d)/2
	     or = n(a+p)/2

~ Geometric series(Gunottor dhara)
	n th term = ar^n-1
   sum of n terms = a(r^n - 1)/r-a (r > 1)


~ 1+2+3+...+n = n*(n+1)/2
~ 1^2 + 2^2 + 3^2 +......+n^2 = n*(n+1)(2n+1)/6
~ 1^3 + 2^3 + 3^3 +......+n^3 = (n*(n+1)/2)^2

~ note: (1+2+3+...+n)^2 = 1^3 + 2^3 + 3^3 +......+n^3

--Geometric Series Formula
~ 2^0 + 2^1 + 2^2 + ... + 2^n  =  {2^(n+1)-1}/1
~ 3^0 + 3^1 + 3^2 + ... + 3^n  =  {3^(n+1)-1}/2
~ 4^0 + 4^1 + 4^2 + ... + 4^n  =  {4^(n+1)-1}/3


~ Count & Sum of Divisors
    x = p1^n1 + p2^n2 + p3^n3 + ....
    Number of divisors of X,
	= (n1+1)*(n2+1)*(n3+1)*....
    Sum of all divisors of X,
	= [{p1^(n1+1)-1}/(p1-1)]*[{p2^(n2+1)-1}/(p2-1)]*...

    Ex. X = 36 = 2*2*3*3 = 2^2*3^2
	Numb of Divisors = (2+1)*(2+1) = 9
	Sum of All Divisors = [{2^(2+1)-1}/2-1] * [{3^(2+1)-1}/3-1]
			    = {(2^3-1)/1} * {(3^3-1)/2}
			    = 7 * 13 = 91


/*.......



















.......2 Programming Theory Part.......

~If a number n is divisible by k(prime number), then any number multiply with n also divisible by k.
	if n=9, k=3, then(9*anyNumb)%k=0

~Parity : Even Numbers have Parity Zero(0), odd Numbers have parity 1.

~Palindrome Numb: find same number after reverse (2332 -> 2332)

~Armstrong Numb: (153 = 1^3 + 5^3 + 3^3) so 153 is palindrome nhumb
	(1634 = 1^4 + 6^4 + 3^4 + 4^4) so 1634 is palindrome nhumb

~Strong Numb: 123 : 1!+2!+3! = 9;  123 != 9;  so 123 is not strong numb
	     145 : 1!+4!+5! = 145; so 145 is strong numb

~Sub Array: If an Array has n elements. Then maximum sub array possible = 	    n*(n+1)/2
~Sub Sequence: If an Array has n element. Then number of sub sequence = 2^n

~/* Bitwise:

	3 << 1 = 3*2^1
	3 << 4 = 3*2^4

	3 >> 1 = 3/2^1
	32 >> 4 = 32/2^4

	
	*check if a number n is power of 2 or not...
	if(8 & (8-1) == 0) then 8 is power of 2; 2^3 = 8

	2^3 = 8 = 1000
	      7 = 0111
	so, 8 & 7 = 0


	*check how many 1 is in a binary numb...
	n & (n-1);
	count++;
	do this untill n & (n-1) becomes 0.


	*Find an element that present in Array one time
	arr = 2, 4, 3, 4, 2
	do bitwise operation to all,
	((((2^4)^3)^4)^2) = 3

*/.......



























*****_____ 3_CODE PART _____*****


~ Sort Array c++: sort(arr, arr+size); include algorithm header file.

~ Sort array JAVA: Arrays.sort(arr); import java.util.Arrays;

~ Fill array with any numb : fill_n(arr, size+1, num_to_set);

~ Memset Syntex: memset(arr, 0, sizeof(arr));



~/* SCAN CHARACTER ARRAY C/C++ :

char ch[20];

scanf("%s", &ch); //cant scan space
cin >> ch; //cant scan space


scanf("%[^\n]s", &ch);
gets(ch);
fgets(ch, 20, stdin);

cin.ignore(); //ignore \n buffer
cin.getline(ch, 20); //c++ only	
getline(cin, str); //c++ only	
*/..........





~/* CHARACTER ARRAY FUNCTIONS	

char ch[size];

length = strlen(ch);

strcpy(ch2, ch1); //copy element from ch1 to ch2

strcat(ch2, ch1); // add ch1 to ch2

strcmp(ch2, ch1); //compare ch1 with ch2

strrev(ch); //reverse a string

strupper(ch);
strlower(ch);

*/...........






~/* STRING IN C++

string str;
cin >> str; // cant scan space
getline(cin, str); //scan space

s1.size();
s1.length();

s1.append(s2);
cout << s1 + s2;

s1.compare(s2); //compare s2 with s1
//s2>s1 = pos value, s2<s1 = neg value

s1.clear(); // delete s1

s1.empty(); //use to check whether s1 is empty or not
//returns Boolean value

insert:
s1 = "sazin";
s1.insert(2, "XYC");//saXYCzin
s1.insert(index, string_to_insert);

erase:
s1 = "sazinxyz";
s1.erase(2, 3); //saxyz, "zin" is deleted
s1.erase(index, numb_of_character_to_erase_from_index);

substr:
string s1 = "sazinxyz";
string xx = s1.substr(2, 3); //xx = "zin"
string xx = s1.substr(index, numb_of_character_from_that_index);
//returns a string

find: 
s1 = "sazin";
s1.find("zi");
//if 'zi' is in string s1, then it return the index of fist later of string

string --> intger
string s1 = "1234";
int n = stoi(s1);

integer --> string
int n = 1234;
string s1 = to_string(n);

SORT STRING IN LAXICOGRAPICALLY
sort(s1.begin(), s1.end());

lower --> upper
transform(s.begin(), s.end(), s.begin(), ::toupper);

upper --> lower
transform(s.begin(), s.end(), s.begin(), ::tolower);

FORM THE BIGEST NUMBER
string s = "2513";
sort(s.begin(), s.end(), greater<int>());

*/........




~/*  string::npos

Check if a string str1 is a substring of str2 or not
	str1 = "cd";
	str2 = "abcd";

        // syntax string1.find(string_that_need_to_find)

	if(str2.find(str1) == string::npos)
	{
     	      print( str1 is not available in str2 );
	}	

*/......



                                                                                                                                                                                                    
~/* Pass 2D arr to func
		
	//1st way	 
	void print_2D_arr(int arr[][Col], int r, int c){
             .........
             .........
	}

	//2nd way
	void print_2D_arr(int (*arr)[col], int r, int c){
             .........
             .........
	}

	main func(){
     	     ........
             ........
    	     print_2D_arr(arr, row, col);
	}



~ Input terminate by EOF :
	// C lang
	while(scanf("%d", &num) != EOF){...}

	// C++
	if(cin.eof()){..}

*/......










*****_____4_CP _____*****

~ built-in functions
* setw()
	cout << setw(5) << right << endl; 

* isalpha(), isdigit()
	.//ck if ch is alphanumeric(digit/alphabet)
	    bool b = isalnum(ch)
	.//ck if ch is alphabet
	    bool b = isalpha(ch) 
	.//ck if ch is digit
	    bool b = isdigit(ch) 
* gcd
	int gcd = __gcd(a, b); //log(n) complexity


~ Order:
.float/double
.long long int
.int
.char


~ Overflow
.-10^9 < int < 10^9
.-10^12 < long int < 10^12
.-10^18 < long long int < 10^18


~ Array Limits
.Local array max size 1e5
.Global array max size 1e7 (variable must be constant)
	const int n = 1e7;
	int arr[n];


~ 1ll -> 1 treated as long long int
~ fixed -> to remove scientific notation from number
~ setprecision(3) -> allow to three decimal point


~ Verdict:
.Compilation Error -> Syntax Error 
.Memory Limit Exceed
.Runtime Error/Segmentation fault -> illegal access of memory
.TLE


~ Time Complexity :
.1 second -> 1e7 iteration	
.2 second -> 1e8 iteration
.3 second -> 1e9 iteration


~ Modulo = any prime number
.(a+b)%M = ((a%M)+(b%M))%M
.(a*b)%M = ((a%M)*(b%M))%M
.(a-b)%M = ((a%M)-(b%M)+M)%M
.(a/b)%M = ((a%M)*(b^-1 %M))%M

.But Why maximum time modulo = 1e9 + 7 ?
	.this number is close to integer range.
	.possible to calculate Multiplication Inverse from 1 to 1e9+7


~ Precomputation Technique : compute value first, then use inside testcase
	.Hashing	
	.prefix sum (1D, 2D)


~ Monotonic array:
 All values are in a sequence

~ Predicate Function:
	Only returns True or False value




